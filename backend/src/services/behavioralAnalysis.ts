import { DISCAnalysisExpanded } from "./discAnalysisExpanded";
import { MBTIAnalysis } from "./mbtiAnalysis";
import {
  BehavioralAnalysisResponse,
  ExpandedDISCProfile,
  MBTIProfile,
} from "../types/behavioral";

export class BehavioralAnalysis {
  static async analyzeComplete(
    transcript: string
  ): Promise<BehavioralAnalysisResponse> {
    try {
      console.log(`üß† [STAGING] Starting complete behavioral analysis...`);

      // Executar an√°lises em paralelo para otimizar performance
      const [discProfile, mbtiProfile] = await Promise.all([
        DISCAnalysisExpanded.analyzeExpandedDISC(transcript),
        MBTIAnalysis.analyzeMBTI(transcript),
      ]);

      // Gerar recomenda√ß√µes combinadas
      const recommendations = this.generateCombinedRecommendations(
        discProfile,
        mbtiProfile,
        transcript
      );

      console.log(`‚úÖ [STAGING] Complete behavioral analysis finished`);

      return {
        transcript,
        profiles: {
          disc: discProfile,
          mbti: mbtiProfile,
        },
        recommendations,
      };
    } catch (error) {
      console.error(
        "‚ùå [STAGING] Error in complete behavioral analysis:",
        error
      );
      throw error;
    }
  }

  private static generateCombinedRecommendations(
    discProfile: ExpandedDISCProfile,
    mbtiProfile: MBTIProfile,
    transcript: string
  ) {
    // Estrat√©gia baseada no perfil DISC (com tipos corretos)
    const discStrategies: Record<string, string> = {
      PRAGMATICO:
        "Foque em resultados concretos, seja direto e objetivo. Evite detalhes desnecess√°rios.",
      INTUITIVO:
        "Use entusiasmo, conecte-se emocionalmente e mostre o impacto social da solu√ß√£o.",
      ANALITICO:
        "Apresente dados detalhados, estat√≠sticas e evid√™ncias. Permita tempo para an√°lise.",
      INTEGRADOR:
        "Construa relacionamento, seja paciente e mostre como a solu√ß√£o beneficia a equipe.",
    };

    // Abordagem baseada no perfil MBTI (com tipos corretos)
    const mbtiApproaches: Record<string, string> = {
      E: "Pessoa extrovertida - engaje em discuss√£o ativa",
      I: "Pessoa introvertida - d√™ tempo para reflex√£o",
      S: "Focado em sensa√ß√£o - use exemplos pr√°ticos e concretos",
      N: "Focado em intui√ß√£o - explore possibilidades futuras",
      T: "Pensador - use l√≥gica e an√°lise objetiva",
      F: "Sentimental - enfatize valores e impacto nas pessoas",
      J: "Julgador - seja estruturado e pontual",
      P: "Perceptivo - mantenha flexibilidade e op√ß√µes",
    };

    const mbtiDominant = mbtiProfile.type.charAt(0); // Primeira letra dominante

    return {
      immediateAction: `Baseado no perfil ${discProfile.type}, ${
        discProfile.subtype
      }: ajuste sua abordagem para ser mais ${discProfile.subtype.toLowerCase()}.`,
      script: `"Entendo que voc√™ valoriza ${discProfile.fdnaDetails.motivationFactors[0]}. Deixe-me mostrar como nossa solu√ß√£o atende exatamente isso..."`,
      discBasedStrategy:
        discStrategies[discProfile.type] ||
        "Abordagem personalizada baseada no perfil identificado.",
      mbtiBasedApproach: `${
        mbtiApproaches[mbtiDominant] || "Abordagem equilibrada"
      } - Tipo ${mbtiProfile.type}`,
      combinedInsights: `Cliente ${discProfile.type}/${mbtiProfile.type}: ${discProfile.fdnaDetails.communicationStyle}. ${mbtiProfile.strengths[0]} √© um ponto forte para abordar.`,
    };
  }
}
